const { GoogleGenerativeAI } = require("@google/generative-ai");

const MODEL_NAME = "gemini-1.5-pro";

exports.generateImage = async (req, res) => {
  const { instruction } = req.body;

  if (!instruction) {
    return res.status(400).json({ error: "Instruction manquante pour l'image." });
  }

  try {
    const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    const model = genAI.getGenerativeModel({ model: MODEL_NAME });

    const result = await model.generateContent([
      { role: "user", parts: [{ text: `Génère une image selon l'instruction suivante : ${instruction}` }] }
    ]);

    const response = await result.response;
    const imageBase64 = response.parts?.[0]?.inlineData?.data;

    if (!imageBase64) {
      return res.status(500).json({ error: "Aucune image générée." });
    }

    res.json({ image: `data:image/png;base64,${imageBase64}` });
  } catch (err) {
    console.error("Erreur lors de la génération d’image :", err.message);
    res.status(500).json({ error: "Erreur lors de la génération d’image." });
  }
};
